var lastIP = '';
$(document).ready(function() {
    const startYear = 2024;
    const currentYear = new Date().getFullYear();
    $('#year').text(currentYear === startYear ? startYear : `${startYear}-${currentYear}`);
    $('#loading').show();
    getLocalIPInfo().finally(() => $('#loading').hide());
});
async function getLocalIPInfo() {
    try {
        const response = await fetch('https://ip.sl.al/ipapi');
        const data = await response.json();
        displayResult(data);
    } catch (error) {
        handleRequestError(error);
    }
}
async function getIPInfo() {
    let ipInput = $('#ipInput').val().trim().replace(/：/g, ':');
    ipInput = ipInput.replace(/[^0-9a-fA-F:.]/g, '');
    if (!ipInput || !(isValidIPv4(ipInput) || isValidIPv6(ipInput))) {
        alert("请输入正确的IP地址，谢谢！");
        return;
    }

    if (isPrivateIP(ipInput)) {
        alert("你妈死了，查你妈内网IP呢？");
        return;
    }

    $('#loading').show();
    try {
        const response = await fetch(`https://ip.sl.al/ipapi/${ipInput}`);
        const data = await response.json();
        if (data.error) {
            handleInvalidParameter(data);
        } else {
            displayResult(data);
        }
    } catch (error) {
        handleRequestError(error);
    } finally {
        $('#loading').hide();
    }
}
function displayResult(data) {
    const resultDiv = document.getElementById("result");
    const ipInput = document.getElementById("ipInput");
    ipInput.value = data.IP;
    lastIP = data.IP;

    const fragment = document.createDocumentFragment();
    const table = document.createElement('table');
    table.className = 'table';

    const provinceOrProv = data.IPinfo.province || data.IPinfo.prov;
    const longitudeOrLng = data.IPinfo.longitude || data.IPinfo.lng;
    const latitudeOrLat = data.IPinfo.latitude || data.IPinfo.lat;

    const rows = [];

    if (data.IP) {
        rows.push({label: '查询 IP', value: data.IP});
    }
    if (data.IPinfo.country) {
        rows.push({label: '国家', value: data.IPinfo.country});
    }
    if (provinceOrProv || data.IPinfo.city || data.IPinfo.district) {
        let region = provinceOrProv || '';
        if (data.IPinfo.city && data.IPinfo.city !== provinceOrProv) {
            region += (region ? ' ' : '') + data.IPinfo.city;
        }
        if (data.IPinfo.district && data.IPinfo.district !== data.IPinfo.city && data.IPinfo.district !== provinceOrProv) {
            region += (region ? ' ' : '') + data.IPinfo.district;
        }
        if (region) {
            rows.push({label: '地区', value: region});
        }
    }
    if (longitudeOrLng) {
        rows.push({label: '经度', value: longitudeOrLng});
    }
    if (latitudeOrLat) {
        rows.push({label: '纬度', value: latitudeOrLat});
    }
    if (data.IPinfo.isp) {
        rows.push({label: 'ISP', value: data.IPinfo.isp});
    }
    if (data.IPinfo.asnumber) {
        rows.push({label: 'AS 号码', value: data.IPinfo.asnumber});
    }
    if (data.IPinfo.zipcode) {
        rows.push({label: '邮编', value: data.IPinfo.zipcode});
    }

    const usageTypeMap = {
        'ANY': '任播网络，属于数据中心的一部分，任播网络',
        'CDN': '内容分发，属于数据中心的一部分，内容分发网络',
        'COM': '商业公司，以盈利为目的的公司',
        'DNS': '域名解析，用户提供域名解析服务的IP',
        'EDU': '教育机构，学校/教育机构使用的IP',
        'GTW': '企业专线，固定IP，中大型公司专线上网的IP',
        'GOV': '政府机构，政府单位使用的IP',
        'DYN': '动态IP，家庭住宅用户使用的IP',
        'IDC': '数据中心，机房/云服务商使用的IP',
        'IXP': '交换中心，网络交换中心使用的IP',
        'MOB': '移动网络，基站出口IP（2G/3G/4G/5G）',
        'NET': '基础设施，网络设备骨干路由使用的IP',
        'ORG': '组织机构，非营利性组织机构',
        'SAT': '卫星通信，通过卫星上网的出口IP',
        'BOGON': '保留 IP，用于确保在特定情况下，计算机或设备可以在局域网中保持相同的IP地址，而不会被分配给其他设备',
        'AUR': '已分配-未路由，在网络设置中分配了IP地址，但这些IP地址不会被路由器或网络设备用于转发数据包',
        'RNU': '已路由-未使用，在网络中分配了可以路由的IP地址，但目前尚未用于任何设备或通信',
        'UND': '未分配 IP，在特定网络中尚未被分配给任何设备或用途的IP地址',
        'WLA': 'WLAN 热点，无线局域网（WLAN）中的一个区域，其中提供无线网络连接，允许设备通过Wi-Fi连接到互联网或局域网',
        'DDT': '专用出口，专门用于将数据从一个封闭的网络环境（如公司内部网络）安全地传输到外部网络',
        'USE': '已使用，在网络中已经分配给特定设备或用途的IP地址或资源'
    };

if (data.IPinfo.usage_type) {
    const usageType = data.IPinfo.usage_type;
    const usageTypeCN = usageTypeMap[usageType];
    if (usageTypeCN) {
        rows.push({label: '使用类型', value: usageTypeCN});  // 只显示中文解释
    }
}

    rows.forEach(row => {
        if (row.value) {
            const tr = document.createElement('tr');
            const tdLabel = document.createElement('td');
            tdLabel.innerHTML = `<strong>${row.label}：</strong>`;
            const tdValue = document.createElement('td');
            tdValue.innerHTML = row.value;
            if (row.label === '查询 IP') {
                tdValue.className = 'small-font';
                const copyButton = document.createElement('button');
                copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                copyButton.className = 'btn btn-outline-secondary';
                copyButton.style.marginLeft = '10px';
                copyButton.onclick = function() {
                    copyToClipboard(row.value);
                };
                tdValue.appendChild(copyButton);
            }
            tr.appendChild(tdLabel);
            tr.appendChild(tdValue);
            table.appendChild(tr);
        }
    });
    fragment.appendChild(table);
    resultDiv.innerHTML = '';
    resultDiv.appendChild(fragment);
}

function handleInvalidParameter(response) {
    const resultDiv = document.getElementById("result");
    resultDiv.innerHTML = `<h2>参数错误</h2><p><strong>错误消息:</strong> ${response.error.info}</p>`;
}

function handleRequestError(error) {
    const resultDiv = document.getElementById("result");
    resultDiv.innerHTML = `<h2>请求错误</h2><p><strong>错误消息:</strong> ${error.message}</p>`;
}
function isValidIPv4(ip) {
    const ipv4Regex = /^(\d{1,3}\.){3}\d{1,3}$/;
    return ipv4Regex.test(ip);
}
function isValidIPv6(ip) {
    const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/;
    return ipv6Regex.test(ip);
}
function isPrivateIP(ip) {
    const privateIPv4Regex = /^(10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|0\.\d{1,3}\.\d{1,3}\.\d{1,3}|100\.(6[4-9]|[7-9]\d|1[0-1]\d|12[0-7])\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|198\.(1[8-9])\.\d{1,3}\.\d{1,3})$/;
    const privateIPv6Regex = /^((::1$)|(^fe80:)|(^fd[0-9a-f]{2}:))/i;
    return privateIPv4Regex.test(ip) || privateIPv6Regex.test(ip);
}
function copyToClipboard(text) {
    var dummy = document.createElement("textarea");
    document.body.appendChild(dummy);
    dummy.value = text;
    dummy.select();
    document.execCommand("copy");
    document.body.removeChild(dummy);
}
